The ``matrix_divided`` module
======================

Importing ``matrix_divided``
-------------------

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing ``matrix_divided`` - matrix is ints
-------------------

positive int divisor
    >>> matrix_divided([[1, 2], [3, 4]], 3)
    [[0.33, 0.67], [1.0, 1.33]]

negative int divisor
    >>> matrix_divided([[1, 2], [3, 4]], -3)
    [[-0.33, -0.67], [-1.0, -1.33]]

positive float divisor
    >>> matrix_divided([[1, 2], [3, 4]], 3.)
    [[0.33, 0.67], [1.0, 1.33]]

negative float divisor
    >>> matrix_divided([[1, 2], [3, 4]], -3.)
    [[-0.33, -0.67], [-1.0, -1.33]]

Testing ``matrix_divided`` - matrix is floats
-------------------

positive int divisor
    >>> matrix_divided([[1., 2.], [3., 4.]], 3)
    [[0.33, 0.67], [1.0, 1.33]]

negative int divisor
    >>> matrix_divided([[1., 2.], [3., 4.]], -3)
    [[-0.33, -0.67], [-1.0, -1.33]]

positive float divisor
    >>> matrix_divided([[1., 2.], [3., 4.]], 3.)
    [[0.33, 0.67], [1.0, 1.33]]

negative float divisor
    >>> matrix_divided([[1., 2.], [3., 4.]], -3)
    [[-0.33, -0.67], [-1.0, -1.33]]

Testing ``matrix_divided`` - matrix is mix of ints and floats
-------------------

positive int divisor
    >>> matrix_divided([[1., 2], [3, 4.]], 3)
    [[0.33, 0.67], [1.0, 1.33]]

negative int divisor
    >>> matrix_divided([[1., 2], [3, 4.]], -3)
    [[-0.33, -0.67], [-1.0, -1.33]]

positive float divisor
    >>> matrix_divided([[1., 2], [3, 4.]], 3.)
    [[0.33, 0.67], [1.0, 1.33]]

negative float divisor
    >>> matrix_divided([[1., 2], [3, 4.]], -3.)
    [[-0.33, -0.67], [-1.0, -1.33]]

Testing ``matrix_divided`` - misc cases
-------------------

zero divisor
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

infinite divisor
    >>> matrix_divided([[1, 2], [3, 4]], float("inf"))
    [[0.0, 0.0], [0.0, 0.0]]

string divisor
    >>> matrix_divided([[1, 2], [3, 4]], "2")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

matrix contains non-int/non-float values
    >>> matrix_divided([[1., 2], ["3", 4.]], -2.)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix contains inf/NaN
    >>> matrix_divided([[1., 2.], [float("inf")/float("nan"), 4.]], 2.)
    [[0.5, 1.0], [nan, 2.0]]

matrix contains inf/NaN, divisor is inf/NaN
    >>> matrix_divided([[1., 2], [float("inf")/float("nan"), 4.]], float("inf")/float("nan"))
    [[nan, nan], [nan, nan]]

improperly sized matrix
    >>> matrix_divided([[1, 2], [3, 4, 5]], 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

missing 1 argument
    >>> matrix_divided([[1, 2], [3, 4, 5]], )
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

missing all argument
    >>> matrix_divided()
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
